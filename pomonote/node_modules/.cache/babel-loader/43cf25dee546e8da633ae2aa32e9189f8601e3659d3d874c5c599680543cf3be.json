{"ast":null,"code":"var _jsxFileName = \"/Users/kylacruz/Documents/GitHub/ELEC_FinalProject/pomonote/src/Pages/Todo.js\",\n  _s = $RefreshSig$();\nimport \"../CSS/Todo.css\";\nimport { DataContext } from \"../DataContext\";\n//import { useContext, useEffect } from \"react\";\n//import { useNavigate } from \"react-router-dom\";\n//import React, { Component } from \"react\";\nimport React, { useState, useContext } from \"react\";\n//import { DataContext } from \"../DataContext\"; // Update the path based on your folder structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Todo() {\n  _s();\n  const {\n    loggedIn\n  } = useContext(DataContext);\n\n  // Your existing code here\n  const {\n    todo,\n    setTodo\n  } = useContext(DataContext);\n  const [userInput, setUserInput] = useState(\"\");\n  const [list, setList] = useState([]);\n\n  // Set a user input value\n  const updateInput = value => {\n    setUserInput(value);\n  };\n\n  // Add item if user input is not empty\n  const addItem = () => {\n    if (userInput.trim() !== \"\") {\n      const newItem = {\n        id: Math.random(),\n        value: userInput.trim(),\n        done: false\n      };\n      setList([...list, newItem]);\n      setUserInput(\"\");\n    }\n  };\n\n  // Function to delete item from list using id to delete\n  const deleteItem = key => {\n    const updatedList = list.filter(item => item.id !== key);\n    setList(updatedList);\n  };\n\n  // Function to mark item as done\n  const markAsDone = index => {\n    const updatedList = [...list];\n    updatedList[index].done = !updatedList[index].done;\n    setList(updatedList);\n  };\n\n  // Function to clear all tasks\n  const clearTasks = () => {\n    setList([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"add task . . .\",\n        value: userInput,\n        onChange: e => updateInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addItem,\n        children: \"ADD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearTasks,\n        children: \"CLEAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: item.done ? 'line-through' : 'none'\n          },\n          children: item.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => markAsDone(index),\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteItem(item.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(Todo, \"MH4p5zcCUqsziYuRx2m4EqhhtwU=\");\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["DataContext","React","useState","useContext","jsxDEV","_jsxDEV","Todo","_s","loggedIn","todo","setTodo","userInput","setUserInput","list","setList","updateInput","value","addItem","trim","newItem","id","Math","random","done","deleteItem","key","updatedList","filter","item","markAsDone","index","clearTasks","className","children","type","placeholder","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","style","textDecoration","_c","$RefreshReg$"],"sources":["/Users/kylacruz/Documents/GitHub/ELEC_FinalProject/pomonote/src/Pages/Todo.js"],"sourcesContent":["import \"../CSS/Todo.css\";\r\nimport { DataContext } from \"../DataContext\";\r\n//import { useContext, useEffect } from \"react\";\r\n//import { useNavigate } from \"react-router-dom\";\r\n//import React, { Component } from \"react\";\r\nimport React, { useState, useContext } from \"react\";\r\n//import { DataContext } from \"../DataContext\"; // Update the path based on your folder structure\r\n\r\nfunction Todo() {\r\n  const { loggedIn } = useContext(DataContext);\r\n\r\n  // Your existing code here\r\n  const { todo, setTodo } = useContext(DataContext);\r\n\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [list, setList] = useState([]);\r\n\r\n  // Set a user input value\r\n  const updateInput = (value) => {\r\n    setUserInput(value);\r\n  };\r\n\r\n  // Add item if user input is not empty\r\n  const addItem = () => {\r\n    if (userInput.trim() !== \"\") {\r\n      const newItem = {\r\n        id: Math.random(),\r\n        value: userInput.trim(),\r\n        done: false,\r\n      };\r\n      setList([...list, newItem]);\r\n      setUserInput(\"\");\r\n    }\r\n  };\r\n\r\n  // Function to delete item from list using id to delete\r\n  const deleteItem = (key) => {\r\n    const updatedList = list.filter((item) => item.id !== key);\r\n    setList(updatedList);\r\n  };\r\n\r\n  // Function to mark item as done\r\n  const markAsDone = (index) => {\r\n    const updatedList = [...list];\r\n    updatedList[index].done = !updatedList[index].done;\r\n    setList(updatedList);\r\n  };\r\n\r\n  // Function to clear all tasks\r\n  const clearTasks = () => {\r\n    setList([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoBody\">\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"add task . . .\"\r\n          value={userInput}\r\n          onChange={(e) => updateInput(e.target.value)}\r\n        />\r\n        <button onClick={addItem}>ADD</button>\r\n        <button onClick={clearTasks}>CLEAR</button>\r\n      </div>\r\n      <ul>\r\n        {list.map((item, index) => (\r\n          <li key={index}>\r\n            <span style={{ textDecoration: item.done ? 'line-through' : 'none' }}>\r\n              {item.value}\r\n            </span>\r\n            <button onClick={() => markAsDone(index)}>Done</button>\r\n            <button onClick={() => deleteItem(item.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}