{"ast":null,"code":"var _jsxFileName = \"/Users/kylacruz/Documents/GitHub/ELEC_FinalProject/pomonote/src/Pages/Todo.js\",\n  _s = $RefreshSig$();\nimport \"../CSS/Todo.css\";\nimport { DataContext } from \"../DataContext\";\nimport { useContext, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Todo() {\n  _s();\n  const {\n    loggedIn,\n    setLoggedIn\n  } = useContext(DataContext);\n  const navigate = useNavigate();\n\n  //checks if user is logged in or not, if not go to login page\n  useEffect(() => {\n    if (!loggedIn) navigate(\"/login\");\n  }, [loggedIn, navigate]);\n\n  //using persisting data \"context\", instead of using useState the todo items\n  //just use the states declared from the DataContext file, sample below\n\n  //imbis na [todo,setTodo] = useState(null); yung from context nalang na ganto\n\n  const {\n    todo,\n    setTodo\n  } = useContext(DataContext);\n  class App extends Component {\n    constructor(props) {\n      super(props);\n\n      // Setting up state\n      this.editItem = index => {\n        const todos = [...this.state.list];\n        const editedTodo = prompt('Edit the task:');\n        if (editedTodo !== null && editedTodo.trim() !== '') {\n          let updatedTodos = [...todos];\n          updatedTodos[index].value = editedTodo.trim();\n          this.setState({\n            list: updatedTodos\n          });\n        }\n      };\n      this.state = {\n        userInput: \"\",\n        list: []\n      };\n    }\n\n    // Set a user input value\n    updateInput(value) {\n      this.setState({\n        userInput: value\n      });\n    }\n\n    // Add item if user input is not empty\n    addItem() {\n      if (this.state.userInput.trim() !== \"\") {\n        const userInput = {\n          // Add a random id which is used to delete\n          id: Math.random(),\n          // Add a user value to list\n          value: this.state.userInput.trim(),\n          done: false // Initialize done property as false\n        };\n\n        // Update list\n        const list = [...this.state.list];\n        list.push(userInput);\n\n        // reset state\n        this.setState({\n          list,\n          userInput: \"\"\n        });\n      }\n    }\n\n    // Function to delete item from list using id to delete\n    deleteItem(key) {\n      const list = [...this.state.list];\n\n      // Filter values and leave value which we need to delete\n      const updateList = list.filter(item => item.id !== key);\n\n      // Update list in state\n      this.setState({\n        list: updateList\n      });\n    }\n    markAsDone(index) {\n      const todos = [...this.state.list];\n      todos[index].done = !todos[index].done; // Toggle the done property\n      this.setState({\n        list: todos\n      });\n    }\n    clearTasks() {\n      this.setState({\n        list: [] // Set the list to an empty array to clear all tasks\n      });\n    }\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoBody\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"add task . . .\",\n            value: this.state.userInput,\n            onChange: e => this.updateInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.addItem(),\n            children: \"ADD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.clearTasks(),\n            children: \"CLEAR\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.list.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                textDecoration: item.done ? 'line-through' : 'none'\n              },\n              children: item.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.markAsDone(index),\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.deleteItem(item.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.editItem(index),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this);\n    }\n  }\n}\n_s(Todo, \"xF9uHz8gMP8UX0q7FgnraNl4as8=\", false, function () {\n  return [useNavigate];\n});\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["DataContext","useContext","useEffect","useNavigate","React","Component","jsxDEV","_jsxDEV","Todo","_s","loggedIn","setLoggedIn","navigate","todo","setTodo","App","constructor","props","editItem","index","todos","state","list","editedTodo","prompt","trim","updatedTodos","value","setState","userInput","updateInput","addItem","id","Math","random","done","push","deleteItem","key","updateList","filter","item","markAsDone","clearTasks","render","className","children","type","placeholder","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","style","textDecoration","_c","$RefreshReg$"],"sources":["/Users/kylacruz/Documents/GitHub/ELEC_FinalProject/pomonote/src/Pages/Todo.js"],"sourcesContent":["import \"../CSS/Todo.css\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport React, { Component } from \"react\";\r\n\r\nfunction Todo() {\r\n  const { loggedIn, setLoggedIn } = useContext(DataContext);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  //checks if user is logged in or not, if not go to login page\r\n  useEffect(() => {\r\n    if (!loggedIn) navigate(\"/login\");\r\n  }, [loggedIn, navigate]);\r\n\r\n  //using persisting data \"context\", instead of using useState the todo items\r\n  //just use the states declared from the DataContext file, sample below\r\n\r\n  //imbis na [todo,setTodo] = useState(null); yung from context nalang na ganto\r\n\r\n  const { todo, setTodo } = useContext(DataContext);\r\n\r\n  class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Setting up state\r\n        this.state = {\r\n            userInput: \"\",\r\n            list: [],\r\n        };\r\n    }\r\n\r\n    // Set a user input value\r\n    updateInput(value) {\r\n        this.setState({\r\n            userInput: value,\r\n        });\r\n    }\r\n\r\n    // Add item if user input is not empty\r\n    addItem() {\r\n        if (this.state.userInput.trim() !== \"\") {\r\n            const userInput = {\r\n                // Add a random id which is used to delete\r\n                id: Math.random(),\r\n\r\n                // Add a user value to list\r\n                value: this.state.userInput.trim(),\r\n                done: false, // Initialize done property as false\r\n            };\r\n\r\n            // Update list\r\n            const list = [...this.state.list];\r\n            list.push(userInput);\r\n\r\n            // reset state\r\n            this.setState({\r\n                list,\r\n                userInput: \"\",\r\n            });\r\n        }\r\n    }\r\n\r\n    // Function to delete item from list using id to delete\r\n    deleteItem(key) {\r\n        const list = [...this.state.list];\r\n\r\n        // Filter values and leave value which we need to delete\r\n        const updateList = list.filter((item) => item.id !== key);\r\n\r\n        // Update list in state\r\n        this.setState({\r\n            list: updateList,\r\n        });\r\n    }\r\n\r\n    editItem = (index) => {\r\n        const todos = [...this.state.list];\r\n        const editedTodo = prompt('Edit the task:');\r\n        if (editedTodo !== null && editedTodo.trim() !== '') {\r\n            let updatedTodos = [...todos]\r\n            updatedTodos[index].value = editedTodo.trim()\r\n            this.setState({\r\n                list: updatedTodos,\r\n            });\r\n        }\r\n    }\r\n\r\n    markAsDone(index) {\r\n        const todos = [...this.state.list];\r\n        todos[index].done = !todos[index].done; // Toggle the done property\r\n        this.setState({\r\n            list: todos,\r\n        });\r\n    }\r\n\r\n    clearTasks() {\r\n        this.setState({\r\n            list: [], // Set the list to an empty array to clear all tasks\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todoBody\">\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"add task . . .\"\r\n                        value={this.state.userInput}\r\n                        onChange={(e) => this.updateInput(e.target.value)}\r\n                    />\r\n                    <button onClick={() => this.addItem()}>\r\n                        ADD\r\n                    </button>\r\n                    <button onClick={() => this.clearTasks()}>\r\n                        CLEAR\r\n                    </button>\r\n                </div>\r\n                <ul>\r\n                    {this.state.list.map((item, index) => (\r\n                        <li key={index}>\r\n                            <span\r\n                                style={{\r\n                                    textDecoration: item.done ? 'line-through' : 'none',\r\n                                }}\r\n                            >\r\n                                {item.value}\r\n                            </span>\r\n                            <button onClick={() => this.markAsDone(index)}>\r\n                                Done\r\n                            </button>\r\n                            <button onClick={() => this.deleteItem(item.id)}>\r\n                                Delete\r\n                            </button>\r\n                            <button onClick={() => this.editItem(index)}>\r\n                                Edit\r\n                            </button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n}\r\n\r\nexport default Todo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}